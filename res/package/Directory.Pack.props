<?xml version="1.0" encoding="utf-8"?>

<!-- Template was generated by: https://github.com/nemonuri/package-metadatas-templates -->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
  ## How to
  1. Read 'Package authoring best practices' first.
  2. Write or modify package metadata propertyies.
  3. Import this project file into your main project file.
    - If you don't know about project import, read 'Project import example' first.
  -->

  <!--
  ## Reference documents
  - Package authoring best practices: https://learn.microsoft.com/en-us/nuget/create-packages/package-authoring-best-practices
  - Project import example: https://learn.microsoft.com/en-us/visualstudio/msbuild/import-element-msbuild?view=vs-2022#example
  - pack and restore as MSBuild targets: https://learn.microsoft.com/en-us/nuget/reference/msbuild-targets
  - Semantic Versioning 2.0.0: https://semver.org/
  -->

  <PropertyGroup Label="Package Metadata">

    <!--
    - The package name or identifier.
    - Default: $(AssemblyName)
    -->
    <PackageId Condition="'$(PackageId)' == ''">$(AssemblyName)</PackageId>

    <!--
    - NuGet package version.
    - This is semver compatible, for example 1.0.0, 1.0.0-beta, or 1.0.0-beta-00345.
      - If you don't know about semver, read 'Semantic Versioning 2.0.0'.
    - Default: $(Version)
    -->
    <PackageVersion Condition="'$(PackageVersion)' == ''">$(Version)</PackageVersion>

    <!--
    - A semicolon-separated list of packages authors, matching the profile names on nuget.org.
    - These are displayed in the NuGet Gallery on nuget.org and are used to cross-reference packages by the same authors.
    - Recommend: Use "pretty name".
      - ContosoToolkit (X)
      - Contoso Corporation (O)
    - TO-DO: Fill your or your organization's names as package authors.
    -->
    <Authors Condition="'$(Authors)' == ''">TODO</Authors>

    <!--
    - A human-friendly title of the package, typically used in UI displays as on nuget.org and the Package Manager in Visual Studio.
    - Default: $(PackageId)
    -->
    <Title Condition="'$(Title)' == ''">$(PackageId)</Title>
    
    <!--
    - A description of the package.
    - Recommend: Write a short description (up to 4000 characters) to describe your package.
    - TO-DO: Fill package description.
    -->
    <Description Condition="'$(Description)' == ''">TODO</Description>

    <!--
    - Copyright details for the package.
    - Recommend: Add a copyright notice to your package with "Copyright (c) <name/company> <year>".
    -->
    <Copyright Condition="'$(Copyright)' == ''">Copyright (c) $(Authors) $([System.DateTime]::Now.Year)</Copyright>

    <!--
    - Repository URL used to clone or retrieve source code.
    - Example: https://github.com/NuGet/NuGet.Client.git
    -->
    <RepositoryUrl Condition="'$(RepositoryUrl)' == ''"></RepositoryUrl>

    <!--
    - Repository type.
    - Default: git
    -->
    <RepositoryType Condition="'$(RepositoryType)' == ''">git</RepositoryType>

    <!--
    - A URL for the project homepage.
    - Recommend: Include a link to an associated project, repository, or company website.
    -->
    <PackageProjectUrl Condition="'$(PackageProjectUrl)' == ''">$(RepositoryUrl)</PackageProjectUrl>

    <!--
    - In-Package path to the package icon image file.
    - Recommend: Use an image that is 128x128 and has a transparent background (PNG) for best viewing results.
    -->
    <PackageIcon Condition="'$(PackageIcon)' == ''">nemonuri_icon_128x128.png</PackageIcon>

    <!--
    - In-Package path to the package README markdown file.
    - Recommend: Add a README markdown file that provides an overview of what your package does and how to get started.
    -->
    <PackageReadmeFile
      Condition="('$(PackageReadmeFile)' == '') and Exists('$(PackageReadmeFilePath)')"
    >$([System.IO.Path]::GetFileName('$(PackageReadmeFilePath)'))</PackageReadmeFile>

    <!--
    - A space-delimited list of tags and keywords that describe the package.
    - Tags are used when searching for packages.
    - Recommend: Include several tags with key terms related to your package to enhance discoverability.
    -->
    <PackageTags Condition="'$(PackageTags)' == ''"></PackageTags>

    <!--
    - A description of the changes made in this release of the package.
    - Recommend 1: Use this format
      1. Breaking changes
      2. New features
      3. Bug fixes
    - Recommend 2: Include a link to the release note file.
    - Recommend 3: Include a link to the release note URL.
    -->
    <PackageReleaseNotes Condition="'$(PackageReleaseNotes)' == ''"></PackageReleaseNotes>

    <!--
    - An SPDX license expression.
      - SPDX License List: https://spdx.org/licenses/
        - NuGet.org only accepts license expressions that 'OSI Approved' or 'FSF Free/Libre'.
      - SPDX expression syntax version 2.0: https://spdx.github.io/spdx-spec/v2-draft/SPDX-license-expressions/#d4-composite-license-expressions
    - If you want to use your own license, use <PackageLicenseFile> property instead.
      - Packing a license expression or a license file: https://learn.microsoft.com/en-us/nuget/reference/msbuild-targets#packing-a-license-expression-or-a-license-file
    -->
    <PackageLicenseExpression Condition="'$(PackageLicenseExpression)' == ''"></PackageLicenseExpression>

  </PropertyGroup>

  <ItemGroup Label="Package Metadata">
    
    <!-- Including icon file info package. -->
    <None Include="$(MSBuildThisFileDirectory)nemonuri_icon_128x128.png" Pack="true" PackagePath="/" Visible="false"/>

    <!-- Including readme file info package. -->
    <None Include="$(PackageReadmeFilePath)"
      Pack="true"
      PackagePath="/"
      Visible="false"
      Condition="Exists('$(PackageReadmeFilePath)')" />
    
  </ItemGroup>

</Project>