{
	// Place your GLOBAL snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

    "Inheritdoc": {
        "scope": "csharp",
        "prefix": ["inheritdoc","ihd"],
        "body": [
            "/// <inheritdoc cref=\"$1\" ${2| ,path=\"/\",path=\"/*[self::]\",path=\"/*[not(self::)]\",path=\"/*[@name='']|}$0/>"
        ]
    },
	
	"Allows ref struct": {
		"scope": "csharp",
		"prefix": ["allowsrefstruct","ars"],
		"body": [
			"#if NET9_0_OR_GREATER",
			"    $0${1|where T : allows ref struct,\\, allows ref struct|}",
			"#endif"
		]
	},

	"Summary ad-Hoc ": {
		"scope": "csharp",
		"prefix": ["summaryadhoc","sad"],
		"body": [
			"/// <summary>",
			"/// An ad-hoc implementation of <see cref=\"${1:Interface}\"/>",
			"/// </summary>"
		]
	}
}